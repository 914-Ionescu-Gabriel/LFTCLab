N = { const, text, separator, primitive_types, func_decl_stmt, assign_stmt, stmt, if_stmt, rel_op, out_stmt, return_stmt, for_stmt, arith_op, logic_op, assign_op, val_expr, rel_expr, logical_expr, func_call, decl_stmt, in_stmt, decl_stmt_intstring, intstring_access}
E = { ", \n, \t, if, int64_const, (, ), ", symbols, string_const, int64, string, cout<<, for, ;, return, intstring, else, input, ==, !=, <, >, <=, >=, +, -, *, /, %, or, &&, !, =, +=, -=, *=, /=, identifier, const, function, .string, .int }
S = { stmt }
P = {
	const -> int64_const | string_const
	text -> " " " const symbols " " "
	separator -> " " | \n | \t 
	primitive_types -> int64 | string | intstring
	rel_op -> == | != | < | <= | > | >=
	arith_op -> + | - | * | / | %
	logic_op -> or | && | !
	assign_op -> = | += | -= | *= | /=
	val_expr -> identifier | const arith_op const | identifier | val_expr
	rel_expr -> identifier | const | val_expr rel_op identifier | const | val_expr
	logical_expr -> rel_expr logic_op rel_expr | logical_expr
	func_decl_stmt -> function ( identifier | identifier )
	func_call -> identifier ( identifier | identifier )
	decl_stmt -> ( primitive_types identifier = const | identifier ) | ( identifier = in_stmt )
	decl_stmt_intstring -> intstring identifier = identifier | ( int64_const string_const )
	intstring_access = identifier .int | .string
	assign_stmt = identifier assign_op const | identifier | in_stmt
	in_stmt = input ( string_const )
	out_stmt = cout<< text | identifier
	if_stmt = if ( func_call | val_expr | rel_expr | logical_expr ) stmt | else stmt
	for_stmt = for ( identifier = int64 ; rel_op | logic_op ; assign_stmt ) stmt
	return_stmt = return identifier | const | rel_op | logic_op
	stmt = decl_stmt | assign_stmt | in_stmt | out_stmt | if_stmt | for_stmt | return_stmt | decl_stmt_intstring | intstring_access 
} 